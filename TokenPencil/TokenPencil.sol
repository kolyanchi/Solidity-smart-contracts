
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

// This is class that describes you smart contract.
contract SampleToken {
    
    struct Token {
        string name;
        uint costPrice;
        bool sale;
    }
    Token[] tokensArr;
    mapping (uint=>uint) tokenToOwner;

    function createToken(string name,uint costPrice) public {
        tvm.accept();

        for (uint i = 0;i<tokensArr.length;i++){
            require(tokensArr[i].name != name,105);  
        }

        tokensArr.push(Token(name,costPrice,false));
        uint keyAsLastNum = tokensArr.length - 1;
        tokenToOwner[keyAsLastNum] = msg.pubkey();
    }
    
    function getTokenOwner(uint tokenId) public view returns (uint){
        //tvm.accept();
        return tokenToOwner[tokenId];
    }
    

    function getTokenInfo (uint tokenId) public view returns (string tokenName, uint tokenCostPrice,bool sale) {
        //tvm.accept();
        tokenName = tokensArr[tokenId].name;
        tokenCostPrice = tokensArr[tokenId].costPrice;
        sale = tokensArr[tokenId].sale;
    }

    modifier hostAndPayment(uint tokenId) {
        tvm.accept();
        require(msg.pubkey() == tokenToOwner[tokenId],101); 
        _;
    }

    function changeOwner(uint tokenId, uint pubKeyNewOwner) public hostAndPayment(tokenId){
        tokenToOwner[tokenId] = pubKeyNewOwner;
    }
    function changeCostPrice (uint tokenId, uint costPrice) public hostAndPayment(tokenId){
        tokensArr[tokenId].costPrice = costPrice;
    }
    
    function putUpForSale(string name, uint yourPrice) public returns (uint price,bool sale){
        for (uint i = 0;i<tokensArr.length;i++){
            if (tokensArr[i].name == name){
                require(msg.pubkey() == tokenToOwner[i],101);      
                tvm.accept();
                tokensArr[i].sale = true;
                price = yourPrice;
                sale = tokensArr[i].sale;
                
            }
        }
        
        
    }

    constructor() public {
        require(tvm.pubkey() != 0, 101);
        require(msg.pubkey() == tvm.pubkey(), 102);
        tvm.accept();
    }

}
